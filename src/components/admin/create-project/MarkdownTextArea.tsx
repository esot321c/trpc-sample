import { Box, useTheme } from "@mui/material";
import React, { FC, useMemo } from "react";
import "easymde/dist/easymde.min.css";
import dynamic from "next/dynamic";
import { SimpleMDEReactProps } from "react-simplemde-editor";
import { slugify } from "@lib/utils/general";
import { trpc } from "@lib/utils/trpc";

const SimpleMdeEditor = dynamic(
  () => import("react-simplemde-editor"),
  { ssr: false }
);

type TMarkdownTextAreaProps = {
  value: string;
  handleChange: Function;
}

const MarkdownTextArea: FC<TMarkdownTextAreaProps> = ({ value, handleChange }) => {
  const theme = useTheme()
  const uploadFile = trpc.file.upload.useMutation()

  const fileUpload = async (file: File, onSuccess: (url: string) => void, onError: (error: string) => void) => {
    if (!file) return;

    // Check if the file is an image
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file.');
      return;
    }

    const maxSize = 5242880 // 5MB

    if (file.size > maxSize) {
      alert(`Please select a file smaller than ${maxSize / 1048576} MB.`);
      return;
    }

    // Function to convert file into Base64 format
    const convertFileToBase64 = (file: File): Promise<string> => {
      return new Promise((resolve, reject) => {
        const fileReader = new FileReader();
        fileReader.onload = () => resolve(fileReader.result as string);
        fileReader.onerror = error => reject(error);
        fileReader.readAsDataURL(file); // This will encode the file as base64
      });
    };

    try {
      const base64File = await convertFileToBase64(file);

      // Remove the base64 prefix generated by readAsDataURL (if necessary)
      const base64Data = base64File.split(';base64,').pop();

      if (base64Data) {
        const slugFileName = slugify(file.name)
        const extension = file.name.split('.').pop() || ''; // safe default, in case there's no extension
        const correctedFileName = `${slugFileName}.${extension}`
        const response = await uploadFile.mutateAsync({ fileContent: base64Data, fileName: correctedFileName });
        if (response.image_url) onSuccess(response.image_url);
        else onError(response.message)
      }
      else throw new Error('Error parsing file data')
    } catch (error: any) {
      console.error('Upload failed', error);
      onError(error.message || 'Something went wrong during the upload');
    }
  };

  const mdeOptions = useMemo(() => {
    return {
      showIcons: ["code", "table"],
      hideIcons: ["side-by-side", "fullscreen"],
      spellChecker: false,
      uploadImage: true,
      imageUploadFunction: (file: File, onSuccess, onError) => {
        fileUpload(file, onSuccess, onError)
      },
      imagePathAbsolute: true
    } as SimpleMDEReactProps["options"]
  }, []);

  return (
    <>
      <Box
        sx={
          {
            '& .EasyMDEContainer': {
              '& .cm-formatting-code-block, .cm-comment': {
                background: 'none',
              },
              '& .editor-toolbar': {
                borderColor: 'rgba(133, 133, 133, 0.2)',
              },
              '& .separator': {
                borderColor: 'rgba(133, 133, 133, 0.2)',
              },
              '& button': {
                color: theme.palette.text.secondary,
                background: '',
                '& :hover': {
                  background: theme.palette.background.paper
                }
              },
              '& button.active': {
                background: theme.palette.background.paper,
                '& button:hover': {
                  background: theme.palette.background.paper
                }
              },
              '& .editor-toolbar button:hover': {
                background: theme.palette.background.paper
              },
              '& .CodeMirror': {
                color: theme.palette.text.primary,
                background: theme.palette.mode === 'dark'
                  ? 'rgba(255, 255, 255, 0.09)'
                  : 'rgba(58, 58, 58, 0.063)',
                borderColor: 'rgba(133, 133, 133, 0.2)',
              },
              '& .CodeMirror-focused': {
                borderColor: theme.palette.primary.main,
              },
              '& .CodeMirror-cursor': {
                borderColor: theme.palette.text.secondary,
              },
              '& .editor-preview': {
                background: theme.palette.background.paper,
                '& a': {
                  color: theme.palette.primary.main
                },
                '& a:visited': {
                  color: theme.palette.primary.main
                },
                '& pre': {
                  background: 'rgba(144,144,144,0.2)',
                  padding: '12px',
                  borderRadius: '6px'
                },
                '& table td, table th': {
                  borderColor: 'rgba(144,144,144,0.5)',
                }
              }
            }
          }
        }
      >
        <SimpleMdeEditor
          value={value}
          options={mdeOptions}
          onChange={(value: string) =>
            handleChange(value)
          }
        />
      </Box>
    </>
  );
};

export default MarkdownTextArea;
