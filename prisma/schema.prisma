generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Transaction {
  id          String   @id @default(cuid())
  description String
  amount      String
  currency    String
  completed   Boolean  @default(false)
  timestamp   DateTime
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  email         String?       @unique
  emailVerified DateTime?
  firstName     String?
  lastName      String?
  middleName    String?
  legalName     String?
  birthDate     String?
  country       String?
  birthCountry  String?
  birthState    String?
  birthPlace    String?
  maritalStatus String?
  nationality   String?
  occupation    String?
  addresses     Address[]
  image         String?
  transactions  Transaction[]
  accounts      Account[]
  sessions      Session[]
}

model Address {
  id           String  @id @default(cuid())
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  region       String?
  district     String?
  province     String?
  postalCode   String
  country      String
  userId       String
  user         User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
